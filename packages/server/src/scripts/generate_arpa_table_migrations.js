
require('dotenv').config();
const {POSTGRES_URL} = process.env;

const {promisify} = require('util');
const {exec: origExec} = require('child_process');
const exec = promisify(origExec);
const knex = require('../db/connection');
const fs = require('fs/promises');
const path = require('path');

const TABLES = [
    // TODO(mbroussard): do we want to rename any of these ARPA tables when moving into GOST?
    "application_settings",
    "arpa_subrecipients",
    "period_summaries",
    "projects",
    "reporting_periods",
    "uploads"
];

function pgDumpCommandTemplate(url, tableName) {
    return `pg_dump ${url} --schema-only --no-owner --no-privileges --table=${tableName}`;
}

function multiplyString(str, n) {
    let ret = '';
    for (let i = 0; i < n; i++) {
        ret += str;
    }
    return ret;
}

const fourSpaces = '    ';
function indent(str, level, delimiter = fourSpaces, skipFirstLine = true) {
    const indentation = multiplyString(delimiter, level);
    return str
        .split('\n')
        .map((line, i) =>
            i > 0 || !skipFirstLine ? indentation + line : line
        )
        .join('\n');
}

function migrationTemplate({pgDumpOutput, pgDumpCommand, tableName, runDate}) {
    const text = `
/* eslint-disable func-names */

// This file was generated by generate_arpa_table_migrations.js on ${runDate.toISOString()}.
// Describe any manual modifications below:
//  - (none)

exports.up = function (knex) {
    return knex.schema.raw(
        // This SQL generated with the following command:
        // ${pgDumpCommand}
        \`
            ${indent(pgDumpOutput, 3)}
        \`
    );
};

exports.down = function (knex) {
    return knex.schema.dropTable('${tableName}');
};
    `;
    return text;
}

async function main() {
    const runDate = new Date();
    for (const tableName of TABLES) {
        // First run pg_dump to get the table DDL
        const pgDumpCommand = pgDumpCommandTemplate(POSTGRES_URL, tableName);
        const {stdout: pgDumpOutput} = await exec(pgDumpCommand);

        // Then create a new Knex migration
        const migrationName = `arpa_integration_create_${tableName}`;
        const migrationPath = await knex.migrate.make(migrationName);
        const migrationFilename = path.basename(migrationPath);

        // Finally, write the dumped DDL into the generated migration file
        const generatedMigration = migrationTemplate({pgDumpOutput, pgDumpCommand, tableName, runDate});
        await fs.writeFile(migrationPath, generatedMigration, {flag: 'w'});

        console.log('Created migration', migrationFilename);
    }
}

if (require.main === module) {
    main();
}
